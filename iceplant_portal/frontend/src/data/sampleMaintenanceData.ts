import { 
  MaintenanceItem, 
  MaintenanceRecord, 
  MaintenanceTemplate,
  MaintenanceTask 
} from '../types/api';

// Sample Equipment Types for Ice Plants
export const equipmentTypes = [
  'Compressor',
  'Condenser',
  'Evaporator',
  'Ice Maker',
  'Brine Tank',
  'Cooling Tower',
  'Water Pump',
  'Refrigeration System',
  'Ammonia System',
  'Electrical Panel',
  'Generator',
  'Forklift',
  'Conveyor Belt',
  'Bagging Machine',
  'Water Treatment System',
  'Storage Room',
  'HVAC System',
];

// Sample Locations
export const locations = [
  'Main Production Floor',
  'Refrigeration Room',
  'Electrical Room',
  'Storage Area',
  'Water Treatment Area',
  'Loading Dock',
  'Mechanical Room',
  'Outdoor Cooling Area',
  'Brine Room',
  'Compressor Room',
];

// Sample Maintenance Items
export const sampleMaintenanceItems: MaintenanceItem[] = [
  {
    id: 1,
    equipment_name: 'Primary Ice Maker',
    equipment_type: 'Ice Maker',
    model_number: 'IM-2000X',
    serial_number: 'IM-20231234',
    location: 'Main Production Floor',
    installation_date: '2021-08-15',
    last_maintenance_date: '2023-03-10',
    next_maintenance_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    maintenance_frequency: 3,
    frequency_unit: 'months',
    status: 'operational',
    notes: 'Primary ice production machine, critical component',
    created_at: '2021-08-15T10:00:00Z',
    updated_at: '2023-03-10T15:30:00Z',
  },
  {
    id: 2,
    equipment_name: 'Main Ammonia Compressor',
    equipment_type: 'Compressor',
    model_number: 'AC-1500',
    serial_number: 'AC-20200524',
    location: 'Compressor Room',
    installation_date: '2020-05-24',
    last_maintenance_date: '2023-04-15',
    next_maintenance_date: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    maintenance_frequency: 3,
    frequency_unit: 'months',
    status: 'requires_maintenance',
    notes: 'Main compressor for refrigeration system',
    created_at: '2020-05-24T08:00:00Z',
    updated_at: '2023-04-15T11:45:00Z',
  },
  {
    id: 3,
    equipment_name: 'Brine Circulation Pump',
    equipment_type: 'Water Pump',
    model_number: 'WP-750',
    serial_number: 'WP-20210612',
    location: 'Brine Room',
    installation_date: '2021-06-12',
    last_maintenance_date: '2023-02-28',
    next_maintenance_date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    maintenance_frequency: 6,
    frequency_unit: 'months',
    status: 'operational',
    notes: 'Circulates brine solution for freezing process',
    created_at: '2021-06-12T14:30:00Z',
    updated_at: '2023-02-28T10:15:00Z',
  },
  {
    id: 4,
    equipment_name: 'Backup Generator',
    equipment_type: 'Generator',
    model_number: 'GEN-5000',
    serial_number: 'GEN-20190315',
    location: 'Electrical Room',
    installation_date: '2019-03-15',
    last_maintenance_date: '2023-01-10',
    next_maintenance_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    maintenance_frequency: 6,
    frequency_unit: 'months',
    status: 'operational',
    notes: 'Emergency power backup system',
    created_at: '2019-03-15T09:00:00Z',
    updated_at: '2023-01-10T16:20:00Z',
  },
  {
    id: 5,
    equipment_name: 'Cooling Tower',
    equipment_type: 'Cooling Tower',
    model_number: 'CT-3000',
    serial_number: 'CT-20180510',
    location: 'Outdoor Cooling Area',
    installation_date: '2018-05-10',
    last_maintenance_date: '2023-05-05',
    next_maintenance_date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    maintenance_frequency: 2,
    frequency_unit: 'months',
    status: 'under_maintenance',
    notes: 'Heat rejection system for refrigeration',
    created_at: '2018-05-10T11:00:00Z',
    updated_at: '2023-05-05T13:10:00Z',
  },
  {
    id: 6,
    equipment_name: 'Bagging System',
    equipment_type: 'Bagging Machine',
    model_number: 'BM-1000',
    serial_number: 'BM-20220318',
    location: 'Main Production Floor',
    installation_date: '2022-03-18',
    last_maintenance_date: '2023-04-25',
    next_maintenance_date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    maintenance_frequency: 1,
    frequency_unit: 'months',
    status: 'not_operational',
    notes: 'Automatic ice bagging system',
    created_at: '2022-03-18T13:45:00Z',
    updated_at: '2023-04-25T09:30:00Z',
  },
  {
    id: 7,
    equipment_name: 'Secondary Condenser',
    equipment_type: 'Condenser',
    model_number: 'CON-2500',
    serial_number: 'CON-20210203',
    location: 'Refrigeration Room',
    installation_date: '2021-02-03',
    last_maintenance_date: '2023-03-20',
    next_maintenance_date: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    maintenance_frequency: 4,
    frequency_unit: 'months',
    status: 'operational',
    notes: 'Heat exchanger for refrigeration system',
    created_at: '2021-02-03T10:30:00Z',
    updated_at: '2023-03-20T14:15:00Z',
  },
];

// Sample Maintenance Records
export const sampleMaintenanceRecords: MaintenanceRecord[] = [
  {
    id: 1,
    maintenance_item: 1,
    equipment_name: 'Primary Ice Maker',
    maintenance_date: '2023-03-10',
    maintenance_type: 'scheduled',
    performed_by: 'John Technician',
    cost: 450.00,
    parts_replaced: 'Water filter, O-rings',
    duration: 3,
    issues_found: 'Slight wear on conveyor belt',
    actions_taken: 'Replaced water filter, lubricated moving parts, adjusted tension on conveyor belt',
    recommendations: 'Consider replacing conveyor belt in next 6 months',
    next_maintenance_date: '2023-06-10',
    status: 'completed',
    created_at: '2023-03-10T15:30:00Z',
    updated_at: '2023-03-10T15:30:00Z',
  },
  {
    id: 2,
    maintenance_item: 2,
    equipment_name: 'Main Ammonia Compressor',
    maintenance_date: '2023-04-15',
    maintenance_type: 'scheduled',
    performed_by: 'Maria Engineer',
    cost: 850.00,
    parts_replaced: 'Gasket seal, pressure valve',
    duration: 5,
    issues_found: 'Minor oil leak, unusual noise during operation',
    actions_taken: 'Replaced gasket seal, pressure valve, checked alignment, refilled oil',
    recommendations: 'Monitor oil levels weekly',
    next_maintenance_date: '2023-07-15',
    status: 'completed',
    created_at: '2023-04-15T11:45:00Z',
    updated_at: '2023-04-15T11:45:00Z',
  },
  {
    id: 3,
    maintenance_item: 3,
    equipment_name: 'Brine Circulation Pump',
    maintenance_date: '2023-02-28',
    maintenance_type: 'scheduled',
    performed_by: 'John Technician',
    cost: 300.00,
    parts_replaced: 'Impeller',
    duration: 2,
    issues_found: 'Reduced flow rate',
    actions_taken: 'Replaced worn impeller, cleaned intake filter',
    recommendations: 'Check brine concentration monthly',
    next_maintenance_date: '2023-08-28',
    status: 'completed',
    created_at: '2023-02-28T10:15:00Z',
    updated_at: '2023-02-28T10:15:00Z',
  },
  {
    id: 4,
    maintenance_item: 5,
    equipment_name: 'Cooling Tower',
    maintenance_date: '2023-05-05',
    maintenance_type: 'scheduled',
    performed_by: 'Maria Engineer',
    cost: 550.00,
    parts_replaced: 'Fan belts, water distribution nozzles',
    duration: 4,
    issues_found: 'Scale buildup, worn fan belts',
    actions_taken: 'Descaled heat exchanger surfaces, replaced fan belts and damaged nozzles',
    recommendations: 'Implement water treatment program to reduce scaling',
    next_maintenance_date: '2023-07-05',
    status: 'completed',
    created_at: '2023-05-05T13:10:00Z',
    updated_at: '2023-05-05T13:10:00Z',
  },
  {
    id: 5,
    maintenance_item: 6,
    equipment_name: 'Bagging System',
    maintenance_date: '2023-04-25',
    maintenance_type: 'emergency',
    performed_by: 'Alex Repair',
    cost: 1200.00,
    parts_replaced: 'Motor control board, sensor array',
    duration: 8,
    issues_found: 'Electrical failure, bag sealing issues',
    actions_taken: 'Replaced motor control board, calibrated sensors, realigned sealing mechanism',
    recommendations: 'Perform weekly functional test of sealing mechanism',
    next_maintenance_date: '2023-05-25',
    status: 'completed',
    created_at: '2023-04-25T09:30:00Z',
    updated_at: '2023-04-25T09:30:00Z',
  },
  {
    id: 6,
    maintenance_item: 5,
    equipment_name: 'Cooling Tower',
    maintenance_date: new Date().toISOString().split('T')[0],
    maintenance_type: 'scheduled',
    performed_by: 'John Technician',
    cost: 0, // Not completed yet
    duration: 0, // Not completed yet
    actions_taken: 'Maintenance in progress',
    status: 'in_progress',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  },
  {
    id: 7,
    maintenance_item: 6,
    equipment_name: 'Bagging System',
    maintenance_date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    maintenance_type: 'corrective',
    performed_by: 'Alex Repair',
    cost: 0, // Not started yet
    duration: 0, // Not started yet
    actions_taken: 'Scheduled for repair',
    status: 'scheduled',
    created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
    updated_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
  },
];

// Sample Maintenance Tasks
export const sampleMaintenanceTasks: MaintenanceTask[] = [
  {
    id: 1,
    task_name: 'Check refrigerant levels',
    description: 'Verify refrigerant levels are within specification',
    sequence_number: 1,
    estimated_time: 15,
    template_id: 1,
    is_required: true,
    created_at: '2023-01-01T00:00:00Z',
    updated_at: '2023-01-01T00:00:00Z',
  },
  {
    id: 2,
    task_name: 'Inspect compressor oil level',
    description: 'Check oil level in compressor sightglass',
    sequence_number: 2,
    estimated_time: 10,
    template_id: 1,
    is_required: true,
    created_at: '2023-01-01T00:00:00Z',
    updated_at: '2023-01-01T00:00:00Z',
  },
  {
    id: 3,
    task_name: 'Clean condenser coils',
    description: 'Remove debris and clean condenser coils',
    sequence_number: 3,
    estimated_time: 45,
    template_id: 1,
    is_required: true,
    created_at: '2023-01-01T00:00:00Z',
    updated_at: '2023-01-01T00:00:00Z',
  },
  {
    id: 4,
    task_name: 'Check electrical connections',
    description: 'Inspect and tighten all electrical connections',
    sequence_number: 4,
    estimated_time: 30,
    template_id: 1,
    is_required: true,
    created_at: '2023-01-01T00:00:00Z',
    updated_at: '2023-01-01T00:00:00Z',
  },
  {
    id: 5,
    task_name: 'Test safety controls',
    description: 'Verify all safety controls are operational',
    sequence_number: 5,
    estimated_time: 20,
    template_id: 1,
    is_required: true,
    created_at: '2023-01-01T00:00:00Z',
    updated_at: '2023-01-01T00:00:00Z',
  },
];

// Sample Maintenance Templates
export const sampleMaintenanceTemplates: MaintenanceTemplate[] = [
  {
    id: 1,
    template_name: 'Compressor Quarterly Maintenance',
    equipment_type: 'Compressor',
    tasks: sampleMaintenanceTasks.filter(task => task.template_id === 1),
    maintenance_frequency: 3,
    frequency_unit: 'months',
    estimated_duration: 2,
    required_tools: 'Pressure gauge, leak detector, multimeter, torque wrench',
    required_parts: 'Oil filters, gaskets, refrigerant (if needed)',
    required_skills: 'HVAC certification, refrigerant handling license',
    notes: 'Ensure system is powered down before beginning maintenance',
    created_at: '2023-01-01T00:00:00Z',
    updated_at: '2023-01-01T00:00:00Z',
  },
  {
    id: 2,
    template_name: 'Cooling Tower Monthly Check',
    equipment_type: 'Cooling Tower',
    tasks: [],
    maintenance_frequency: 1,
    frequency_unit: 'months',
    estimated_duration: 1.5,
    required_tools: 'Water test kit, cleaning brushes, pressure washer',
    required_parts: 'Water treatment chemicals, replacement nozzles',
    required_skills: 'Water treatment knowledge',
    notes: 'Check water quality and treatment levels',
    created_at: '2023-01-02T00:00:00Z',
    updated_at: '2023-01-02T00:00:00Z',
  },
  {
    id: 3,
    template_name: 'Ice Maker Maintenance',
    equipment_type: 'Ice Maker',
    tasks: [],
    maintenance_frequency: 3,
    frequency_unit: 'months',
    estimated_duration: 3,
    required_tools: 'Screwdrivers, cleaning solution, sanitizer',
    required_parts: 'Water filters, gaskets, spray nozzles',
    required_skills: 'Equipment-specific training',
    notes: 'Follow manufacturer guidelines for cleaning and sanitizing',
    created_at: '2023-01-03T00:00:00Z',
    updated_at: '2023-01-03T00:00:00Z',
  },
];

// Sample Dashboard Data
export const sampleMaintenanceDashboard = {
  totalEquipment: sampleMaintenanceItems.length,
  equipmentByStatus: {
    operational: sampleMaintenanceItems.filter(item => item.status === 'operational').length,
    requires_maintenance: sampleMaintenanceItems.filter(item => item.status === 'requires_maintenance').length,
    under_maintenance: sampleMaintenanceItems.filter(item => item.status === 'under_maintenance').length,
    not_operational: sampleMaintenanceItems.filter(item => item.status === 'not_operational').length,
  },
  upcomingMaintenance: sampleMaintenanceItems
    .filter(item => new Date(item.next_maintenance_date) > new Date())
    .sort((a, b) => new Date(a.next_maintenance_date).getTime() - new Date(b.next_maintenance_date).getTime())
    .slice(0, 3),
  recentMaintenance: sampleMaintenanceRecords
    .filter(record => record.status === 'completed')
    .sort((a, b) => new Date(b.maintenance_date).getTime() - new Date(a.maintenance_date).getTime())
    .slice(0, 3),
  totalMaintenanceCost: sampleMaintenanceRecords.reduce((sum, record) => sum + record.cost, 0),
  averageMaintenanceDuration: sampleMaintenanceRecords
    .filter(record => record.status === 'completed')
    .reduce((sum, record) => sum + record.duration, 0) / 
    sampleMaintenanceRecords.filter(record => record.status === 'completed').length,
  maintenanceByType: {
    scheduled: sampleMaintenanceRecords.filter(record => record.maintenance_type === 'scheduled').length,
    emergency: sampleMaintenanceRecords.filter(record => record.maintenance_type === 'emergency').length,
    preventive: sampleMaintenanceRecords.filter(record => record.maintenance_type === 'preventive').length,
    corrective: sampleMaintenanceRecords.filter(record => record.maintenance_type === 'corrective').length,
  },
}; 