from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import TokenAuthentication, SessionAuthentication
from rest_framework import viewsets, status
from rest_framework.decorators import action
from django.contrib.auth.models import User, Group
from django.shortcuts import get_object_or_404
from iceplant_core.group_permissions import IsInGroups
from .serializers import (
    GroupSerializer, 
    GroupDetailSerializer, 
    UserListSerializer, 
    UserGroupAssignmentSerializer
)

# Define a reusable IsAdmins permission class
class IsAdmins(IsInGroups):
    def __init__(self):
        super().__init__(groups=["Admins"])

class UserPermissionsGroupViewSet(viewsets.ModelViewSet):
    """
    API endpoint for managing groups related to user permissions.
    Only admins can access this viewset.
    """
    queryset = Group.objects.all().order_by("name")
    serializer_class = GroupSerializer
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated, IsAdmins]
    
    def get_serializer_class(self):
        if self.action == "retrieve":
            return GroupDetailSerializer
        return GroupSerializer
    
    @action(detail=True, methods=["post"])
    def add_users(self, request, pk=None):
        """Add users to this group"""
        group = self.get_object()
        user_ids = request.data.get("user_ids", [])
        
        added_users = []
        for user_id in user_ids:
            try:
                user = User.objects.get(id=user_id)
                user.groups.add(group)
                added_users.append(user.username)
            except User.DoesNotExist:
                pass
        
        return Response({
            "status": "success",
            "message": f"Added {len(added_users)} users to group {group.name}",
            "added_users": added_users
        })
    
    @action(detail=True, methods=["post"])
    def remove_users(self, request, pk=None):
        """Remove users from this group"""
        group = self.get_object()
        user_ids = request.data.get("user_ids", [])
        
        removed_users = []
        for user_id in user_ids:
            try:
                user = User.objects.get(id=user_id)
                user.groups.remove(group)
                removed_users.append(user.username)
            except User.DoesNotExist:
                pass
        
        return Response({
            "status": "success",
            "message": f"Removed {len(removed_users)} users from group {group.name}",
            "removed_users": removed_users
        })


class UserManagementViewSet(viewsets.ReadOnlyModelViewSet):
    """
    API endpoint for managing users in the context of group assignments.
    Only admins can access this viewset.
    """
    queryset = User.objects.all().order_by("username")
    serializer_class = UserListSerializer
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated, IsAdmins]
    
    @action(detail=False, methods=["post"])
    def assign_groups(self, request):
        """Assign groups to a user"""
        serializer = UserGroupAssignmentSerializer(data=request.data)
        
        if serializer.is_valid():
            user_id = serializer.validated_data["user_id"]
            group_ids = serializer.validated_data.get("group_ids", [])
            
            try:
                user = User.objects.get(id=user_id)
            except User.DoesNotExist:
                return Response({
                    "status": "error",
                    "message": "User not found"
                }, status=status.HTTP_404_NOT_FOUND)
            
            # Check if trying to modify a superuser (only superusers can do this)
            if user.is_superuser and not request.user.is_superuser:
                return Response({
                    "status": "error",
                    "message": "Only superusers can modify other superusers' groups"
                }, status=status.HTTP_403_FORBIDDEN)
            
            # Clear existing groups and add new ones
            user.groups.clear()
            
            assigned_groups = []
            for group_id in group_ids:
                try:
                    group = Group.objects.get(id=group_id)
                    user.groups.add(group)
                    assigned_groups.append(group.name)
                except Group.DoesNotExist:
                    pass
            
            return Response({
                "status": "success",
                "message": f"Updated group assignments for user {user.username}",
                "user": user.username,
                "groups": assigned_groups
            })
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    @action(detail=False, methods=["get"])
    def list_groups(self, request):
        """List all groups with their user counts"""
        groups = Group.objects.all()
        group_data = []
        
        for group in groups:
            group_data.append({
                "id": group.id,
                "name": group.name,
                "user_count": group.user_set.count()
            })
        
        return Response(group_data)
    
    @action(detail=True, methods=["get"])
    def group_membership(self, request, pk=None):
        """Get the groups a user belongs to"""
        try:
            user = User.objects.get(pk=pk)
        except User.DoesNotExist:
            return Response({
                "status": "error",
                "message": "User not found"
            }, status=status.HTTP_404_NOT_FOUND)
        
        groups = user.groups.all()
        group_names = [group.name for group in groups]
        
        return Response({
            "user": user.username,
            "groups": group_names
        })


class UserProfileView(APIView):
    """API endpoint for user to view their own profile information"""
    authentication_classes = [TokenAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]
    
    def get(self, request):
        user = request.user
        
        # Get groups the user belongs to
        groups = user.groups.values_list("name", flat=True)
        
        data = {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_superuser": user.is_superuser,
            "groups": list(groups)
        }
        
        return Response(data)
