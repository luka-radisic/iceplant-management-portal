# Generated by Django on YYYY-MM-DD HH:MM
# Replace YYYY-MM-DD HH:MM with the actual timestamp if desired

from django.db import migrations

# Define permission codenames for each group (app_label.codename)
# Based on refined rules: Office/Sales=Add/View/Change (No Delete), HR=Full Attendance Access
OFFICE_PERMS = [
    # Sales
    'sales.add_sale', 'sales.view_sale', 'sales.change_sale',
    # Buyers
    'buyers.add_buyer', 'buyers.view_buyer', 'buyers.change_buyer',
    # Inventory
    'inventory.add_inventory', 'inventory.view_inventory', 'inventory.change_inventory',
    'inventory.add_inventoryadjustment', 'inventory.view_inventoryadjustment', 'inventory.change_inventoryadjustment',
    # Expenses (No approve_expense)
    'expenses.add_expense', 'expenses.view_expense', 'expenses.change_expense',
    'expenses.add_expensecategory', 'expenses.view_expensecategory', 'expenses.change_expensecategory',
    # Maintenance
    'maintenance.add_maintenanceitem', 'maintenance.view_maintenanceitem', 'maintenance.change_maintenanceitem',
    'maintenance.add_maintenancerecord', 'maintenance.view_maintenancerecord', 'maintenance.change_maintenancerecord',
    # Company Config (View Only)
    'companyconfig.view_companysettings',
]

HR_PERMS = [
    # Attendance Models (Full CRUD except Attendance itself, which has ImportLog model)
    'attendance.add_employeeprofile', 'attendance.view_employeeprofile', 'attendance.change_employeeprofile', 'attendance.delete_employeeprofile',
    'attendance.add_employeeshift', 'attendance.view_employeeshift', 'attendance.change_employeeshift', 'attendance.delete_employeeshift',
    'attendance.add_departmentshift', 'attendance.view_departmentshift', 'attendance.change_departmentshift', 'attendance.delete_departmentshift',
    # Attendance Record (View/Change only)
    'attendance.view_attendance', 'attendance.change_attendance',
    # Custom Permission (Defined on ImportLog model in attendance app)
    'attendance.import_attendance',
    # Also need view/change/delete for ImportLog if HR manages it
    'attendance.add_importlog', 'attendance.view_importlog', 'attendance.change_importlog', 'attendance.delete_importlog',
]

SALES_PERMS = [
    # Sales
    'sales.add_sale', 'sales.view_sale', 'sales.change_sale',
    # Buyers
    'buyers.add_buyer', 'buyers.view_buyer', 'buyers.change_buyer',
    # Inventory
    'inventory.add_inventory', 'inventory.view_inventory', 'inventory.change_inventory',
    'inventory.add_inventoryadjustment', 'inventory.view_inventoryadjustment', 'inventory.change_inventoryadjustment',
    # Expenses (No approve_expense)
    'expenses.add_expense', 'expenses.view_expense', 'expenses.change_expense',
    'expenses.add_expensecategory', 'expenses.view_expensecategory', 'expenses.change_expensecategory',
    # Maintenance
    'maintenance.add_maintenanceitem', 'maintenance.view_maintenanceitem', 'maintenance.change_maintenanceitem',
    'maintenance.add_maintenancerecord', 'maintenance.view_maintenancerecord', 'maintenance.change_maintenancerecord',
    # Company Config (View Only)
    'companyconfig.view_companysettings',
]

def apply_group_permissions(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    groups_permissions = {
        'Office': OFFICE_PERMS,
        'HR': HR_PERMS,
        'Sales': SALES_PERMS,
    }

    print("\nApplying initial group permissions...") # Add print statement

    for group_name, permission_strings in groups_permissions.items():
        group, created = Group.objects.get_or_create(name=group_name)
        group.permissions.clear() # Clear existing perms first
        permissions_to_add = []
        print(f"Processing group: {group_name}")
        for perm_string in permission_strings:
            try:
                app_label, codename = perm_string.split('.')
                # Find Permission object directly
                permission = Permission.objects.get(content_type__app_label=app_label, codename=codename)
                permissions_to_add.append(permission)
            except Permission.DoesNotExist:
                print(f"  Warning: Permission '{perm_string}' not found. Skipping.")
            except Exception as e:
                print(f"  Error processing permission '{perm_string}': {e}. Skipping.")

        if permissions_to_add:
            group.permissions.add(*permissions_to_add)
            print(f"  Assigned {len(permissions_to_add)} permissions to group '{group_name}'")
        else:
            print(f"  No valid permissions found or assigned for group '{group_name}'")


def revert_group_permissions(apps, schema_editor):
    # This function will clear permissions from the specified groups on rollback
    Group = apps.get_model('auth', 'Group')
    groups_to_clear = ['Office', 'HR', 'Sales']
    print("\nReverting initial group permissions...") # Add print statement
    for group_name in groups_to_clear:
        try:
            group = Group.objects.get(name=group_name)
            group.permissions.clear()
            print(f"Cleared permissions for group '{group_name}'")
            # Note: We are not deleting the groups themselves on rollback, only clearing permissions.
        except Group.DoesNotExist:
            print(f"Group '{group_name}' not found during revert. Skipping.")


class Migration(migrations.Migration):

    # --- IMPORTANT ---
    # You MUST check and potentially update the 'dependencies' tuple below.
    # It should list the *last* migration applied for the 'users' app *before* this one.
    # If the 'users' app had no models and this is its *very first* migration,
    # you might need to depend on the initial migration of 'auth' or other core apps.
    # Example if previous users migration was '0001_initial':
    # dependencies = [('users', '0001_initial'), ...]
    # If 'users' app is new and has no previous migration:
    dependencies = [
        # ('users', '000X_previous_migration'), # Replace or remove this line
        # Ensure apps whose permissions are needed are migrated first
        ('attendance', '0017_alter_importlog_options_importlog_user'),
        ('buyers', '__latest__'),
        ('companyconfig', '0002_companysettings_tax_percentage'),
        ('expenses', '0003_alter_expense_options_alter_expense_created_by'),
        ('inventory', '__latest__'),
        ('maintenance', '__latest__'),
        ('sales', '__latest__'),
        # Add auth dependency if 'users' is completely new
        ('auth', '__latest__'),
    ]
    # --- END IMPORTANT ---

    operations = [
        migrations.RunPython(apply_group_permissions, reverse_code=revert_group_permissions),
    ]
