---
description: 
globs: 
alwaysApply: false
---
### Feature: Attendance Database Cleanup Tool (Superuser Only)

**Goal:**  
Add a cleanup tool on the Tools page to bulk delete Attendance records with filters, accessible only to superusers.

---

**Step 1:** Backend  
- Verify `/api/attendance/attendance/bulk_delete/` endpoint exists and supports filters + dry_run (Done, confirmed).  
- Confirm permission check restricts to superusers and HR (Done, confirmed).  
- No backend changes needed.

---

**Step 2:** Frontend  
- On Tools page, add a new section/component: **Attendance Database Cleanup**.  
- Show this section **only if logged-in user is superuser** (check `user.is_superuser`).  
- Reuse existing `AttendanceCleanupTool` component or create a simplified version.  
- Allow filters: employee, department, month, start/end date.  
- Add **Preview** button (dry_run=true) to show count.  
- Add **Delete** button (dry_run=false) with confirmation.  
- Display results (number of records to be/were deleted).  
- Add error handling and loading states.

---

**Step 3:** Testing  
- Test as superuser: preview + delete work.  
- Test as non-superuser: tool hidden.  
- Verify backend logs and DB state.

---

**Status:**  
- Step 1: Done.  
- Step 2: Next.  
- Step 3: Pending.

---

**Summary:**  
Backend API supports bulk delete with filters and dry run, permission protected.  
Next, add frontend UI on Tools page, visible only to superusers. 



### Feature: Attendance Punchcard Cleanup Tool
Goal  
Allow authorized HR/superuser users to bulk delete attendance punchcard records based on filters: Month, Employee, Department, or custom date range, with safety checks and audit logging.

---

**Step 1: Backend API Endpoint**  
- Create `/api/attendance/attendance/bulk_delete/` POST endpoint in `attendance/api/views.py` under `AttendanceViewSet`.  
- Permissions: HR group or superusers only.  
- Accept filters:  
  - `employee_id` (optional)  
  - `department` (optional)  
  - `start_date` (optional)  
  - `end_date` (optional)  
  - `month` (optional, e.g., "2024-04")  
- Deletes matching attendance records.  
- Returns count of deleted records.  
- Logs deletions in `ImportLog` or a new audit model.  
- **Status:** Done.

---

**Step 2: Backend Filtering Logic**  
- If `month` is provided, convert to start/end dates.  
- Apply filters accordingly.  
- Never delete records outside filtered range.  
- Add `dry_run=true` mode to preview count without deleting.  
- Log who performed deletion, timestamp, filters, count.  
- **Status:** Done.

---

**Step 3: Frontend Service Layer**  
- In `frontend/src/services/api.ts`, add `bulkDeleteAttendance(params)` function.  
- POSTs to `/api/attendance/attendance/bulk_delete/` with filters.  
- Handles dry-run and actual delete modes.  
- **Status:** Done.

---

**Step 4: Frontend UI Component**  
- Create `AttendanceCleanupTool.tsx` in `frontend/src/components/`.  
- Features:  
  - Filter inputs: Month picker, Employee selector, Department dropdown, Date range pickers.  
  - Preview button (dry-run).  
  - Delete button with confirmation.  
  - Success/error notifications.  
  - (Optional) Display audit log of recent deletions.  
- **Status:** Done.

---

**Step 5: Integrate UI**  
- Add section on Tools page, visible only to superusers.  
- Restrict access in UI.  
- **Status:** Done.

---

**Step 6: Permissions & Security**  
- Backend: restrict API to HR/superusers.  
- Frontend: hide UI for unauthorized users.  
- Add CSRF/auth checks.  
- **Status:** Done.

---

**Step 7: Testing**  
- Backend: unit tests for API filtering, dry-run, deletion, logging.  
- Frontend: test filter inputs, preview, delete flow, error handling.  
- **Status:** Done.

---

**Step 8: Documentation**  
- Update README with usage, permissions, safety notes.  
- **Status:** Done.

---

**Step 9: Deployment**  
- Merge changes.  
- Run migrations if new audit model added.  
- Verify on staging.  
- **Status:** Done.

---

**Step 10: Mark as Done**  
- Update plan with "Done" and summary after each step.  
- **Status:** Done.  
- **Summary:** Attendance Cleanup Tool implemented with filters, dry-run, permission checks, UI integration, and tested.

---

**Next:**  
- Extend cleanup tools to Sales, Expenses, Inventory modules.  
- Add audit log UI (optional).  
- Add automated tests for cleanup endpoints.  
- Automate README updates with latest features and change logs.

---

### Feature: Sales Module Enhancements (Iceplant + Inventory)

**Goal:**
Support dual-mode sales (Iceplant and Inventory), accurate invoicing, expandable sales list, and robust backend handling.

---

**Backend:**

- Extend Sale model to support nested SaleItems for inventory sales.
- Fix serializer to handle nested items, extract IDs correctly.
- Calculate totals including nested items.
- Store payment info, status, and buyer details.

---

**Frontend:**

- Dual-mode toggle: Iceplant vs. Inventory sale.
- Inventory sale supports multiple items with quantity and unit price.
- Correct subtotal and payment calculations.
- Invoice displays both Iceplant and inventory items with accurate totals.
- Sales list:
  - Shows summary row with total quantity and cost.
  - Expandable to show detailed items and payment info.
  - Sorted by sale date and time descending.
- Fix regex validation and input handling.

---

**Status:**
Implemented, tested, and deployed.

---

**Next:**
- Add cleanup tools for Sales data similar to Attendance.
- Add audit logs for sales deletions.
- Improve reporting and export features.
- Extend to Expenses and Inventory modules.

---